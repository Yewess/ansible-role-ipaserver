---

- name: Gather OS Specific Variables
  include_vars: "{{ item }}"
  with_first_found:
   - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
   - "../vars/{{ ansible_distribution }}.yml"
   - "../vars/{{ ansible_os_family }}.yml"
   - "../vars/defaults.yml"

- name: Install IPA Server Packages
  action: >
    {{ansible_pkg_mgr}} name="{{ item }}" state=present
  with_items: "{{ ipaserver_packages }}"
  become: True

# If needs mod_nss listening on 443 , so change mod_ssl listening port to other than 443 
- name: Check if mod_ssl configured to port 443 and change to 10443(Conflict with mod_nss)
  lineinfile: dest=/etc/httpd/conf.d/ssl.conf regexp="^{{item.key}}" line="{{item.key}}{{item.value}}"
  with_items:
    - key: "Listen"
      value: " 10443"
    - key: "<VirtualHost _default_:"
      value: "10443>"
  register: mod_ssl
  become: True

- block:
    - name: Restart httpd
      service: name=httpd state=restarted
    # 443 Free to be used by mod_nss
    - name: Wait for 443 mod_nss to be available and free
      wait_for: port=443 state=drained delay=20
    - name: Wait for 10443 mod_ssl to be open 
      wait_for: port=10443 state=present delay=20
  when: mod_ssl.changed
  become: True

# Refer https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Identity_Management_Guide/installing-ipa.html#Installing_the_IPA_Server_Packages
- block:
    - name: Run the IPA Server installer
      shell :
       "{{ ipaserver_base_command }}
        --realm {{ ipaserver_realm }}
        --domain {{ ipaserver_domain }}
        -a {{ ipaserver_admin_password }}
        -p {{ ipaserver_dir_admin_password }}
        --hostname={{ ansible_fqdn }}
        --ip-address={{ ansible_default_ipv4.address }}
        {{ '--idstart=%s' % ipaserver_idstart if ipaserver_idstart | default(False) else '' }}
        {{ '--idmax=%s' % ipaserver_idmax if ipaserver_idmax | default(False) else '' }}
        {{ '--forwarder=%s' % ipaserver_dns_forwarder
           if ipaserver_dns_forwarder | default(False) else '--no-forwarders' if ipaserver_setup_dns | default(False) else '' }}
        {{ '--setup-dns' if ipaserver_setup_dns | default(False) else '' }}
        {{ '--ssh-trust-dns' if ipaserver_ssh_trust_dns | default(False) else '' }}
        {{ '' if ipaserver_hbac_allow | default(True) else '--no_hbac_allow' }}
        {{ '' if ipaserver_setup_ntp | default(True) else '--no-ntp' }}
        {{ '' if ipaserver_configure_ssh | default(True) else '--no-ssh' }}
        {{ '' if ipaserver_configure_sshd | default(True) else '--no-sshd' }}
        {{ '' if ipaserver_ui_redirect | default(True) else '--no-ui-redirect' }}"  
      args:
        creates: /etc/ipa/setup_ansible.done
      register: ipasetup
  always:
  # Mark Server Configuration Done 
    - name: Set IPA Server Install and Configuring Done
      file: dest=/etc/ipa/setup_ansible.done state=touch mode=0755
      when: "ipasetup.changed and 'Setup complete' in ipasetup.stdout "
  become: True

# Making sure IPA is running
- block:
    - name: Check if Directory Service is running
      shell: /usr/sbin/ipactl status
      register: ipastatus
      failed_when: "'Directory Service: STOPPED' in ipastatus.stdout or 'Failed' in ipastatus.stderr"
      changed_when: False
  rescue:
    - name: Start Directory Service
      service: name=dirsrv state=started enabled=yes
  always:
    - name: Wait for IPA HTTP/LDAP/Kerberos Ports
      wait_for: port="{{ item }}" timeout=60
      with_items: "{{ ipa_ports }}"
  become: True

# Making Sure TGT is available for next steps
- block:
    - name: Check for Valid Kerberos TGT Cache
      shell: "klist -s"
      changed_when: False
  rescue:
    - name: Kinit IPA Admin
      script: kinit.exp {{ ipaserver_admin_username }} {{ ipaserver_admin_password }} {{ ipaserver_realm }}
      no_log: True
  become: True

# Generate a new ipakeytab since IPA is installed/ configuration changed
- name: Generate IPA Server keytab
  shell: "{{ item }}"
  args:
    chdir: /etc/httpd/conf
  with_items:
    - "ipa-getkeytab -s {{ ansible_fqdn }} -p HTTP/{{ ansible_fqdn }}@{{ ipaserver_realm }} -k ipa.keytab.new"
    - "cp ipa.keytab ipa.keytab.orig "
    - "cp ipa.keytab.new ipa.keytab"
    - "chown apache:apache ipa.keytab*"
  register: ipakeytab
  when: ipasetup.changed
  become: True

# Restart Apache HTTP Server to incude new keytab
- name: Restart httpd
  service:  name=httpd state=restarted enabled=yes
  when: ipakeytab.changed
  become: True

